// Code generated by mockery v2.40.0. DO NOT EDIT.

package mocks

import (
	models "GoMail/app/repository/models"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// DeleteEmail provides a mock function with given fields: ctx, id
func (_m *Repository) DeleteEmail(ctx context.Context, id interface{}) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteEmail")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindEmailLogByID provides a mock function with given fields: ctx, id
func (_m *Repository) FindEmailLogByID(ctx context.Context, id string) (*models.EmailLog, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for FindEmailLogByID")
	}

	var r0 *models.EmailLog
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.EmailLog, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.EmailLog); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.EmailLog)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindEmailLogs provides a mock function with given fields: ctx, filter, page, limit
func (_m *Repository) FindEmailLogs(ctx context.Context, filter interface{}, page int, limit int) ([]*models.EmailLog, int64, error) {
	ret := _m.Called(ctx, filter, page, limit)

	if len(ret) == 0 {
		panic("no return value specified for FindEmailLogs")
	}

	var r0 []*models.EmailLog
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, int, int) ([]*models.EmailLog, int64, error)); ok {
		return rf(ctx, filter, page, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, int, int) []*models.EmailLog); ok {
		r0 = rf(ctx, filter, page, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.EmailLog)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}, int, int) int64); ok {
		r1 = rf(ctx, filter, page, limit)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, interface{}, int, int) error); ok {
		r2 = rf(ctx, filter, page, limit)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FindEmails provides a mock function with given fields: ctx, filter, page, limit
func (_m *Repository) FindEmails(ctx context.Context, filter interface{}, page int, limit int) ([]*models.Email, int64, error) {
	ret := _m.Called(ctx, filter, page, limit)

	if len(ret) == 0 {
		panic("no return value specified for FindEmails")
	}

	var r0 []*models.Email
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, int, int) ([]*models.Email, int64, error)); ok {
		return rf(ctx, filter, page, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, int, int) []*models.Email); ok {
		r0 = rf(ctx, filter, page, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Email)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}, int, int) int64); ok {
		r1 = rf(ctx, filter, page, limit)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, interface{}, int, int) error); ok {
		r2 = rf(ctx, filter, page, limit)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SaveEmail provides a mock function with given fields: ctx, email
func (_m *Repository) SaveEmail(ctx context.Context, email *models.Email) error {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for SaveEmail")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Email) error); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveEmailLog provides a mock function with given fields: ctx, emailLog
func (_m *Repository) SaveEmailLog(ctx context.Context, emailLog *models.EmailLog) error {
	ret := _m.Called(ctx, emailLog)

	if len(ret) == 0 {
		panic("no return value specified for SaveEmailLog")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.EmailLog) error); ok {
		r0 = rf(ctx, emailLog)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
