// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"
	smtp "GoMail/app/libs/smtp"
	mock "github.com/stretchr/testify/mock"
)

// SMTPClient is an autogenerated mock type for the SMTPClient type
type SMTPClient struct {
	mock.Mock
}

// Connect provides a mock function with given fields:
func (_m *SMTPClient) Connect() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Disconnect provides a mock function with given fields:
func (_m *SMTPClient) Disconnect() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Send provides a mock function with given fields: ctx, from, to, subject, body
func (_m *SMTPClient) Send(ctx context.Context, from string, to string, subject string, body string) error {
	ret := _m.Called(ctx, from, to, subject, body)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) error); ok {
		r0 = rf(ctx, from, to, subject, body)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendHTML provides a mock function with given fields: ctx, from, to, subject, htmlBody
func (_m *SMTPClient) SendHTML(ctx context.Context, from string, to string, subject string, htmlBody string) error {
	ret := _m.Called(ctx, from, to, subject, htmlBody)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) error); ok {
		r0 = rf(ctx, from, to, subject, htmlBody)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendWithAttachments provides a mock function with given fields: ctx, from, to, subject, body, attachments
func (_m *SMTPClient) SendWithAttachments(ctx context.Context, from string, to string, subject string, body string, attachments []smtp.Attachment) error {
	ret := _m.Called(ctx, from, to, subject, body, attachments)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, []smtp.Attachment) error); ok {
		r0 = rf(ctx, from, to, subject, body, attachments)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewSMTPClient creates a new instance of SMTPClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSMTPClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *SMTPClient {
	mock := &SMTPClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
